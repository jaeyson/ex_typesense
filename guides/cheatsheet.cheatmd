# Cheatsheet Guide

## Collections

{: .col-2}

### Create using schema

```elixir
# edit your Ecto schema
defmodule MyApp.Listings.Company do
  use Ecto.Schema
  @behaviour ExTypesense

  defimpl Jason.Encoder, for: __MODULE__ do
    def encode(value, opts) do
      value
      |> Map.take([:companies_id, :name, :country])
      |> Enum.map(fn {key, val} ->
        if key === :companies_id, do: {key, Map.get(value, :id)}, else: {key, val}
      end)
      |> Enum.into(%{})
      |> Jason.Encode.map(opts)
    end
  end

  schema "companies" do
    field(:name, :string)
    field(:country, :string)
    field(:companies_id, :integer, virtual: true)
  end

  @impl ExTypesense
  def get_field_types do
    primary_field = __MODULE__.__schema__(:source) <> "_id"

    %{
      default_sorting_field: primary_field,
      fields: [
        %{name: primary_field, type: "int32"},
        %{name: "name", type: "string"},
        %{name: "country", type: "string"}
      ]
    }
  end
end

# then try this on iex -S mix
iex> ExTypesense.create_collection(Company)
{:ok,
  %OpenApiTypesense.CollectionResponse{
    created_at: 1234567890,
    default_sorting_field: "companies_id",
    fields: [...],
    name: "companies",
    num_documents: 0,
    symbols_to_index: [],
    token_separators: []
  }
}
```
{: .wrap}

### Create using map

```elixir
iex> schema =
...> %{
...>   name: "companies",
...>   fields: [
...>     %{name: "company_name", type: "string"},
...>     %{name: "companies_id", type: "int32"},
...>     %{name: "country", type: "string", facet: true}
...>   ],
...>   default_sorting_field: "companies_id"
...> }

iex> ExTypesense.create_collection(schema)
{:ok,
  %OpenApiTypesense.CollectionResponse{
    created_at: 1234567890,
    default_sorting_field: "companies_id",
    fields: [...],
    name: "companies",
    num_documents: 0,
    symbols_to_index: [],
    token_separators: []
  }
}
```
{: .wrap}

### List collections

```elixir
iex> ExTypesense.list_collections()
```
{: .wrap}

### Update a collection

```elixir
iex> schema =
...> %{
...>   fields: [
...>     %{name: "country", drop: true},
...>     %{name: "company_category", type: "string"},
...>   ],
...> }

iex> ExTypesense.update_collection_fields("companies", schema)
{:ok,
  %OpenApiTypesense.CollectionUpdateSchema{
    "fields" => [
      %{name: "country", drop: true},
      %{name: "company_category", type: "string"}
    ]
  }
}
```
{: .wrap}

## Documents

{: .col-2}

### Index a document using map

```elixir
iex> document = %{
...>   collection_name: "companies",
...>   company_name: "Malwart",
...>   companies_id: 1001,
...>   country: "US"
...> }

iex> ExTypesense.index_document(document)
{:ok,
  %{
    id: "0",
    collection_name: "companies",
    company_name: "Malwart",
    companies_id: 1001,
    country: "US"
  }
}
```

### Index a document from an Ecto schema

```elixir
iex> post = Post |> limit(1) |> Repo.one()

iex> ExTypesense.index_document(post, :create)
{:ok,
  %{
    id: "12",
    posts_id: 12,
    title: "the quick brown fox",
    collection_name: "posts"
  }
}
```

### Update a document

```elixir
iex> post = Post |> limit(1) |> Repo.one()

iex> ExTypesense.update_document(post, 0)
{:ok,
  %{
    id: "0",
    collection_name: "posts",
    posts_id: 34,
    title: "test",
    description: "lorem ipsum"
  }
}
```


### Delete a document

```elixir
iex> ExTypesense.delete_document(Post, 0)
{:ok,
  %{
    id: "0",
    collection_name: "posts",
    posts_id: 34,
    title: "test",
    description: "lorem ipsum"
  }
}
```

{: .wrap}

### Delete a document by query

```elixir
iex> opts = [
...>   filter_by: "num_employees:>100",
...>   batch_size: 100
...> ]

iex> ExTypesense.delete_documents_by_query(Employee, opts)
{:ok, %OpenApiTypesense.Documents{num_deleted: 1}}
```

### Indexes multiple documents with maps

```elixir
iex> documents = [
...>   %{
...>     company_name: "Industrial Mills, Co.",
...>     doc_companies_id: 990,
...>     country: "US"
...>   },
...>   %{
...>     company_name: "Washing Machine, Inc.",
...>     doc_companies_id: 10,
...>     country: "US"
...>   }
...> ]

iex> ExTypesense.import_documents("companies", documents)
{:ok, [%{"success" => true}, %{"success" => true}]}
```

### Indexes multiple documents with Ecto structs

```elixir
iex> posts = Post |> Repo.all()

iex> ExTypesense.import_documents(Post, posts)
{:ok, [%{"success" => true}, %{"success" => true}]}
```

## How to use search

{: .col-2}

### Search using Ecto schema (struct)

```elixir
iex> params = %{q: "test", query_by: "title"}
iex> ExTypesense.search(Post, params)
{:ok,
  %{
    "id" => "0",
    "collection_name" => "posts",
    "posts_id" => 34,
    "title" => "test",
    "description" => "lorem ipsum"
  }
}
```

### Multi search

```elixir
iex> searches = [
...>   %{collection: "companies", q: "Loca Cola"},
...>   %{collection: Company, q: "Burgler King"},
...>   %{collection: Catalog, q: "umbrella"}
...> ]
iex> ExTypesense.multi_search(searches)
{:ok,
  [
    {
      %{"facet_counts" => [], "found" => 0, "hits" => [], ...},
      %{"facet_counts" => [], "found" => 0, "hits" => [], ...},
      %{"facet_counts" => [], "found" => 0, "hits" => [], ...},
    }
  ]
}
```

### Search using collection name (string)

```elixir
iex> params = %{q: "test", query_by: "title"}
iex> ExTypesense.search("posts", params)
{:ok,
  %{
    "id" => "0",
    "collection_name" => "posts",
    "post_id" => 34,
    "title" => "test",
    "description" => "lorem ipsum"
  }
}
```
